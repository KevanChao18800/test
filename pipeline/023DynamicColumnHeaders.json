{
	"name": "023DynamicColumnHeaders",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"type": "String",
									"ordinal": 1
								},
								"sink": {
									"name": "OrderDate",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 2
								},
								"sink": {
									"name": "ProductKey",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 3
								},
								"sink": {
									"name": "Country",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 4
								},
								"sink": {
									"name": "EnglishProductName",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 5
								},
								"sink": {
									"name": "SalesAmount",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 6
								},
								"sink": {
									"name": "UnitPrice",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 7
								},
								"sink": {
									"name": "OrderQuantity",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 8
								},
								"sink": {
									"name": "TaxAmt",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"type": "String",
									"ordinal": 9
								},
								"sink": {
									"name": "TotalProductCost",
									"type": "String",
									"physicalType": "nvarchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HeaderLess",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "dboORDERS",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Create Table Column Mappings",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DROP TABLE IF EXISTS ColumnMappings;\n\nCREATE TABLE ColumnMappings (\n    ColumnNumber int,\n    ColumnName varchar(100)\n);\n\nINSERT INTO ColumnMappings (ColumnNumber, ColumnName) VALUES\n(1, 'OrderDate'),\n(2, 'ProductKey'),\n(3, 'Country'),\n(4, 'EnglishProductName'),\n(5, 'SalesAmount'),\n(6, 'TaxAmt'),\n(7, 'OrderQuantity'),\n(8, 'UnitPrice'),\n(9, 'TotalProductCost');"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Actual Script",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Drop SP IF Already Exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "CREATE PROCEDURE sp_GetColumnMappings\nAS\nBEGIN\nDECLARE @jsonTemp nvarchar(max) = '{ \"type\": \"TabularTranslator\", \"mappings\": X }';\nDECLARE @jsonMappings nvarchar(max);\n\nSET @jsonMappings = (\n    SELECT ColumnNumber AS [source.ordinal], ColumnName AS [sink.name]\n    FROM ColumnMappings\n    FOR JSON PATH\n);\n\n-- Output final JSON\nSELECT REPLACE(@jsonTemp, 'X', @jsonMappings) ColumnMapping\nEND"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Drop SP IF Already Exists",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Create Table Column Mappings",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DROP PROCEDURE IF EXISTS sp_GetColumnMappings;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Get Column Mappings",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Actual Script",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[sp_GetColumnMappings]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Copy data2",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get Column Mappings",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": "TRUNCATE TABLE dbo.ORDERS",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"value": "@json(\n    activity('Get Column Mappings').output.firstRow.ColumnMapping\n    )",
						"type": "Expression"
					}
				},
				"inputs": [
					{
						"referenceName": "HeaderLess",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					}
				]
			}
		],
		"folder": {
			"name": "ADF Activities"
		},
		"annotations": [],
		"lastPublishTime": "2025-05-27T20:06:32Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}